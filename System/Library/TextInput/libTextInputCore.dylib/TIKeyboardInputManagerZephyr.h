/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, March 22, 2017 at 9:05:04 AM Mountain Standard Time
* Operating System: Version 10.1 (Build 14U593)
* Image Source: /System/Library/TextInput/libTextInputCore.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libTextInputCore.dylib/libTextInputCore.dylib-Structs.h>
#import <libTextInputCore.dylib/TIKeyboardInputManager.h>
#import <libobjc.A.dylib/TIRevisionHistoryDelegate.h>
#import <libobjc.A.dylib/TILanguageSelectionControllerDelegate.h>

@class NSMutableString, TILanguageSelectionController, TIKeyboardInputManagerConfig, TILRUDictionary, TITextCheckerExemptions, NSCharacterSet, TIRevisionHistory, TIAutoshiftRegularExpressionLoader, NSArray, NSString;

@interface TIKeyboardInputManagerZephyr : TIKeyboardInputManager <TIRevisionHistoryDelegate, TILanguageSelectionControllerDelegate> {

	TIInputManagerZephyr* m_impl;
	NSMutableString* m_composedText;
	unsigned long long m_initialSelectedIndex;
	shared_ptr<KB::TypologyLogger>* m_typology_recorder;
	shared_ptr<KB::LanguageModel>* m_lightweight_language_model;
	TILanguageSelectionController* _languageSelectionController;
	void* m_emojiGeneratorPrimaryLanguage;
	void* m_emojiGeneratorSecondaryLanguage;
	BOOL m_didAttemptPrimaryEmojiGeneratorLoad;
	BOOL m_didAttemptSecondaryEmojiGeneratorLoad;
	BOOL m_shouldShowEmojis;
	EmojiLocaleDataWrapperRef m_emojiDataForPrimaryLocale;
	EmojiLocaleDataWrapperRef m_emojiDataForSecondaryLocale;
	BOOL m_didAttemptPrimaryLocaleForEmojiLoad;
	BOOL m_didAttemptSecondaryLocaleForEmojiLoad;
	BOOL m_isEmojiInputModeEnabled;
	BOOL _isEditingWordPrefix;
	BOOL _wordLearningEnabled;
	TIKeyboardInputManagerConfig* _config;
	TILRUDictionary* _autocorrectionHistory;
	TILRUDictionary* _recentAutocorrections;
	TILRUDictionary* _recentPredictiveInputSelections;
	TILRUDictionary* _rejectedAutocorrections;
	TILRUDictionary* _autocorrectionsSuggestedForCurrentInput;
	TITextCheckerExemptions* _textCheckerExemptions;
	NSCharacterSet* _allowPredictionCharacterSet;
	TIRevisionHistory* _revisionHistory;
	TILRUDictionary* _autocorrectionForCurrentStem;
	TILRUDictionary* _rejectedDisplayedAutocorrectionsForCurrentStem;
	TIAutoshiftRegularExpressionLoader* _autoshiftRegexLoader;
	long long _userInterfaceIdiom;
	unsigned long long _linguisticResourceStatus;
	long long _deleteKeyCount;

}

@property (nonatomic,readonly) TIRevisionHistory * revisionHistory;                                         //@synthesize revisionHistory=_revisionHistory - In the implementation block
@property (nonatomic,readonly) TILRUDictionary * autocorrectionHistory;                                     //@synthesize autocorrectionHistory=_autocorrectionHistory - In the implementation block
@property (nonatomic,readonly) TILRUDictionary * recentAutocorrections;                                     //@synthesize recentAutocorrections=_recentAutocorrections - In the implementation block
@property (nonatomic,readonly) TILRUDictionary * recentPredictiveInputSelections;                           //@synthesize recentPredictiveInputSelections=_recentPredictiveInputSelections - In the implementation block
@property (nonatomic,readonly) TILRUDictionary * rejectedAutocorrections;                                   //@synthesize rejectedAutocorrections=_rejectedAutocorrections - In the implementation block
@property (nonatomic,retain) TILRUDictionary * autocorrectionForCurrentStem;                                //@synthesize autocorrectionForCurrentStem=_autocorrectionForCurrentStem - In the implementation block
@property (nonatomic,retain) TILRUDictionary * rejectedDisplayedAutocorrectionsForCurrentStem;              //@synthesize rejectedDisplayedAutocorrectionsForCurrentStem=_rejectedDisplayedAutocorrectionsForCurrentStem - In the implementation block
@property (nonatomic,readonly) TILRUDictionary * autocorrectionsSuggestedForCurrentInput;                   //@synthesize autocorrectionsSuggestedForCurrentInput=_autocorrectionsSuggestedForCurrentInput - In the implementation block
@property (assign,getter=isWordLearningEnabled,nonatomic) BOOL wordLearningEnabled;                         //@synthesize wordLearningEnabled=_wordLearningEnabled - In the implementation block
@property (assign,nonatomic) BOOL isEditingWordPrefix;                                                      //@synthesize isEditingWordPrefix=_isEditingWordPrefix - In the implementation block
@property (nonatomic,retain) TIAutoshiftRegularExpressionLoader * autoshiftRegexLoader;                     //@synthesize autoshiftRegexLoader=_autoshiftRegexLoader - In the implementation block
@property (nonatomic,readonly) TITextCheckerExemptions * textCheckerExemptions;                             //@synthesize textCheckerExemptions=_textCheckerExemptions - In the implementation block
@property (nonatomic,readonly) NSCharacterSet * allowPredictionCharacterSet;                                //@synthesize allowPredictionCharacterSet=_allowPredictionCharacterSet - In the implementation block
@property (assign,nonatomic) long long userInterfaceIdiom;                                                  //@synthesize userInterfaceIdiom=_userInterfaceIdiom - In the implementation block
@property (assign,nonatomic) unsigned long long linguisticResourceStatus;                                   //@synthesize linguisticResourceStatus=_linguisticResourceStatus - In the implementation block
@property (assign,nonatomic) long long deleteKeyCount;                                                      //@synthesize deleteKeyCount=_deleteKeyCount - In the implementation block
@property (nonatomic,readonly) TIKeyboardInputManagerConfig * config;                                       //@synthesize config=_config - In the implementation block
@property (nonatomic,readonly) TILanguageSelectionController * languageSelectionController; 
@property (nonatomic,readonly) NSArray * languageModelAssets; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)offlineLearningHandleForInputMode:(id)arg1 ;
-(long long)userInterfaceIdiom;
-(void)dealloc;
-(void)suspend;
-(TIKeyboardInputManagerConfig *)config;
-(void)resume;
-(id)candidateResultSet;
-(unsigned long long)initialSelectedIndex;
-(BOOL)usesCandidateSelection;
-(void)setUserInterfaceIdiom:(long long)arg1 ;
-(id)autocorrection;
-(void)clearInput;
-(void)setWordLearningEnabled:(BOOL)arg1 ;
-(id)inputString;
-(id)autocorrectionList;
-(BOOL)nextInputWouldStartSentence;
-(unsigned)inputIndex;
-(id)shadowTyping;
-(unsigned)inputCount;
-(void)setOriginalInput:(id)arg1 ;
-(void)candidateRejected:(id)arg1 ;
-(id)defaultCandidate;
-(id)autocorrectionRecordForWord:(id)arg1 ;
-(void)setInHardwareKeyboardMode:(BOOL)arg1 ;
-(void)setKeyboardEventsLagging:(BOOL)arg1 ;
-(BOOL)canHandleKeyHitTest;
-(long long)keyHitTest:(id)arg1 ;
-(BOOL)shouldUpdateLanguageModel;
-(BOOL)updateLanguageModelForKeyboardState;
-(void)syncToKeyboardState:(id)arg1 from:(id)arg2 afterContextChange:(BOOL)arg3 ;
-(BOOL)shouldUpdateDictionary;
-(void)loadDictionaries;
-(void)didUpdateInputModes:(id)arg1 ;
-(void)didUpdateInputModeProbabilities:(id)arg1 ;
-(id)resourceInputModes;
-(id)initWithInputMode:(id)arg1 ;
-(BOOL)doesComposeText;
-(id)dictionaryInputMode;
-(id)terminatorsDeletingAutospace;
-(unsigned long long)maxPriorWordTokensAfterTrimming;
-(BOOL)acceptsCharacter:(unsigned)arg1 ;
-(BOOL)dictionaryUsesExternalEncoding;
-(const USetRef)precomposedCharacterSet;
-(id)nonstopPunctuationCharacters;
-(id)externalStringToInternal:(id)arg1 ;
-(id)internalStringToExternal:(id)arg1 ;
-(id)wordCharacters;
-(id)dynamicResourcePath;
-(TILRUDictionary *)recentAutocorrections;
-(id)primaryInputMode;
-(void)incrementUnigramCount:(id)arg1 tokenID:(TITokenID)arg2 usageFlags:(unsigned)arg3 ;
-(void)decrementUnigramCount:(id)arg1 tokenID:(TITokenID)arg2 usageFlags:(unsigned)arg3 ;
-(void)incrementLanguageModelCount:(id)arg1 tokenID:(TITokenID)arg2 context:(const TITokenID*)arg3 contextLength:(unsigned long long)arg4 saveToDifferentialPrivacy:(BOOL)arg5 ;
-(void)decrementLanguageModelCount:(id)arg1 tokenID:(TITokenID)arg2 context:(const TITokenID*)arg3 contextLength:(unsigned long long)arg4 ;
-(TITokenID)findTokenIDForWord:(id)arg1 context:(const TITokenID*)arg2 contextLength:(unsigned long long)arg3 tokenLookupMode:(unsigned)arg4 surfaceFormPtr:(id*)arg5 hasCaseInsensitiveStaticVariant:(BOOL*)arg6 ;
-(TITokenID)findTokenIDForWord:(id)arg1 context:(const TITokenID*)arg2 contextLength:(unsigned long long)arg3 tokenLookupMode:(unsigned)arg4 ;
-(TITokenID)addWord:(id)arg1 context:(const TITokenID*)arg2 contextLength:(unsigned long long)arg3 surfaceFormPtr:(id*)arg4 ;
-(void)willChangeToKeyboardState:(id)arg1 afterContextChange:(BOOL)arg2 ;
-(BOOL)updateAdaptationContextToKeyboardState:(id)arg1 from:(id)arg2 ;
-(void)scheduleLinguisticResourceUpdate;
-(BOOL)isLinguisticResourceUpdateScheduled;
-(void)updateDictionaryAndLanguageModel;
-(void)updateEmojiStatus;
-(void)refreshInputManagerState;
-(BOOL)deletesComposedTextByComposedCharacterSequence;
-(void)updateComposedText;
-(unsigned)internalIndexToExternal:(unsigned)arg1 ;
-(unsigned)externalIndexToInternal:(unsigned)arg1 ;
-(id)dictionaryStringForExternalString:(id)arg1 ;
-(id)externalStringForDictionaryString:(id)arg1 ;
-(TIInputManagerZephyr*)initImplementation;
-(SCD_Struct_TI6)lexiconInformation;
-(id)dictionaryPathForContentType:(id)arg1 inputMode:(id)arg2 ;
-(id)staticDictionaryPathForInputMode:(id)arg1 ;
-(id)pathToStaticDictionary;
-(id)deltaDictionaryPathForInputMode:(id)arg1 ;
-(id)pathToDeltaStaticDictionary;
-(id)phraseDictionaryPathForInputMode:(id)arg1 ;
-(id)pathToPhraseDictionary;
-(id)dynamicDictionaryPathForInputMode:(id)arg1 ;
-(id)languageModelAssetsForInputMode:(id)arg1 ;
-(NSArray *)languageModelAssets;
-(id)pathToDynamicDictionary;
-(void)loadFavoniusLanguageModel;
-(shared_ptr<KB::LanguageModel>*)loadedLightweightLanguageModel;
-(void)mobileAssetsChanged:(id)arg1 ;
-(void)setCollatorLocale;
-(void)setLearnsCorrection:(BOOL)arg1 ;
-(BOOL)inHardwareKeyboardMode;
-(void)clearDynamicDictionary;
-(void)releaseDynamicLanguageModel;
-(id)addInput:(id)arg1 flags:(unsigned)arg2 point:(CGPoint)arg3 firstDelete:(unsigned long long*)arg4 fromVariantKey:(BOOL)arg5 ;
-(BOOL)hasLegacyInputStem;
-(BOOL)hasLegacyInputString;
-(unsigned)simulateAutoshiftIfNecessaryForFlags:(unsigned)arg1 ;
-(NSRange)legacyInputRangeForTokenRange:(NSRange)arg1 ;
-(NSRange)acceptableRangeFromRange:(NSRange)arg1 inText:(id)arg2 withSelectionLocation:(unsigned long long)arg3 ;
-(NSRange)inputStringRangeFromRevisionHistory;
-(void)setInputStringFromDocumentState:(id)arg1 ;
-(BOOL)canComputeSentenceContextForInputStem:(id)arg1 ;
-(LanguageModelContext*)sentenceContextForInputStem:(id)arg1 ;
-(id)trimmedInputStem;
-(unsigned long long)countOfWordsIninputStem:(id)arg1 ;
-(unsigned long long)internalIndexOfInputStemSuffix:(id)arg1 ;
-(BOOL)canTrimInputAtIndex:(unsigned)arg1 ;
-(BOOL)canRetrocorrectInputAtIndex:(unsigned)arg1 ;
-(void)trimInput;
-(void)dropInputPrefix:(unsigned)arg1 ;
-(void)dropInput;
-(void)willDropInputStem;
-(void)didDropInputStem;
-(id)deleteFromInput:(unsigned long long*)arg1 ;
-(void)incrementUsageTrackingKeysForDeleteFromInput;
-(void)clearIgnoredSuggestionForCurrentInput;
-(void)acceptInput;
-(id)inputContext;
-(id)internalInputContext;
-(void)updateInputContext;
-(void)setInputIndex:(unsigned)arg1 ;
-(id)inputStem;
-(id)currentWordStem;
-(void)displayedCandidateRejected;
-(BOOL)shouldAllowCorrectionOfAcceptedCandidate:(id)arg1 ;
-(void)textAccepted:(id)arg1 fromPredictiveInputBar:(BOOL)arg2 ;
-(BOOL)shouldSuppressLearning;
-(BOOL)shouldSuppressLanguageSelectionEvidence;
-(BOOL)shouldLearnWord:(id)arg1 ;
-(void)resetRecentMessageCache;
-(void)learnRecentMessageUserIsRespondingTo;
-(TITokenID)tokenIDForWordSeparator:(unsigned short)arg1 ;
-(BOOL)shouldExpectSentenceBoundaryAfterContext:(const TITokenID*)arg1 contextLength:(unsigned long long)arg2 ;
-(void)recordSuggestedAutocorrection:(id)arg1 ;
-(void)recordAcceptedAutocorrection:(id)arg1 fromPredictiveInputBar:(BOOL)arg2 ;
-(void)recordRejectedAutocorrectionForAcceptedText:(id)arg1 ;
-(void)updateForRevisitedString:(id)arg1 ;
-(void)syncToLayoutState:(id)arg1 ;
-(id)sentencePrefixingCharacters;
-(id)sentenceDelimitingCharacters;
-(id)sentenceTrailingCharacters;
-(BOOL)nextInputWouldStartSentenceAfterInput:(id)arg1 ;
-(BOOL)spaceAndNextInputWouldStartSentence;
-(BOOL)_canStartSentenceAfterString:(id)arg1 maxRecursionDepth:(unsigned long long)arg2 ;
-(BOOL)canStartSentenceAfterString:(id)arg1 ;
-(void)setAutoshiftFromInputContext;
-(void)checkAutocorrectionDictionaries;
-(unsigned long long)prefixLengthOfInput:(id)arg1 sharedWithCandidate:(const Candidate*)arg2 ;
-(unsigned long long)prefixLengthOfInput:(id)arg1 sharedWithCandidates:(const CandidateCollection*)arg2 ;
-(id)phraseCandidateCompletedByWord:(const String*)arg1 allowNoSuggest:(BOOL)arg2 ;
-(BOOL)isEditingExistingWord;
-(id)autocorrectionCandidateForInput:(id)arg1 withCandidate:(const Candidate*)arg2 ;
-(id)autocorrectionCandidateForInput:(id)arg1 withCandidate:(const Candidate*)arg2 insertingSpace:(BOOL)arg3 sharedPrefixLength:(unsigned long long)arg4 ;
-(id)terminatorsPreventingAutocorrection;
-(id)terminatorsPrecedingAutospace;
-(BOOL)supportsShortcutConversion;
-(unsigned long long)maximumShortcutLengthAllowed;
-(void)enumerateWordSuffixesOfString:(id)arg1 inRange:(NSRange)arg2 usingBlock:(/*^block*/id)arg3 ;
-(BOOL)shouldSkipShortcutConversionForDocumentState:(id)arg1 ;
-(NSRange)shortcutSearchRangeForString:(id)arg1 ;
-(id)shortcutCompletionsForDocumentState:(id)arg1 ;
-(id)shortcutConversionForDocumentState:(id)arg1 ;
-(id)shortcutConversionForString:(id)arg1 stringStartsInMiddleOfWord:(BOOL)arg2 ;
-(id)shortcutConversionForInput:(id)arg1 andExistingString:(id)arg2 existingStringStartsInMiddleOfWord:(BOOL)arg3 ;
-(BOOL)usesRetrocorrection;
-(id)candidatesForString:(id)arg1 ;
-(BOOL)suggestionBlacklistMatchesStrings:(id)arg1 ;
-(BOOL)shouldDropInputStem;
-(BOOL)shouldAllowContextTokenID:(TITokenID)arg1 ;
-(void)updateResponseModelForKeyboardState:(id)arg1 ;
-(id)cannedResponseCandidatesForString:(id)arg1 ;
-(id)autocorrectionListForSelectedText;
-(void)reconcileCandidates:(CandidateCollection*)arg1 forTypedString:(String*)arg2 withPhraseCandidate:(Candidate*)arg3 replacing:(const String*)arg4 ;
-(BOOL)shouldGenerateSuggestionsForSelectedText;
-(BOOL)shouldAutocapitalizePredictionAfterSpace;
-(BOOL)shouldInsertSpaceBeforePredictions;
-(id)predictionCandidates;
-(id)indexesOfDuplicatesInCandidates:(id)arg1 ;
-(id)getSkinToneSensitiveEmojis:(id)arg1 ;
-(void)updateEmojiLocale;
-(id)createAndAddEmojiTokensFrom:(CFArrayRef)arg1 inArray:(id)arg2 forInputString:(id)arg3 ;
-(id)enumerateForEmojiCandidatesIn:(id)arg1 forEmojiLocaleData:(EmojiLocaleDataWrapperRef)arg2 asReplacementCandidate:(BOOL)arg3 ;
-(id)emojiAppendCandidates:(id)arg1 ;
-(id)emojiReplacementCandidates:(id)arg1 ;
-(void)updateEmojiAdornmentGenerators;
-(id)randomShuffle:(id)arg1 ;
-(id)skinToneModifiedAdornmentEmojis:(id)arg1 forLocale:(EmojiLocaleDataWrapperRef)arg2 forInput:(id)arg3 ;
-(id)emojiAdornmentCandidates:(id)arg1 ;
-(id)extractTokensForEmojiComputation:(id)arg1 ;
-(id)generateEmojiAdornmentCandidates:(id)arg1 ;
-(id)autocorrectionListForEmptyInputWithDesiredCandidateCount:(unsigned long long)arg1 ;
-(id)completionCandidates;
-(id)extendedAutocorrection:(id)arg1 spanningInputsForCandidates:(id)arg2 emojis:(id)arg3 ;
-(NSCharacterSet *)allowPredictionCharacterSet;
-(BOOL)shouldGeneratePredictionsForCurrentContext;
-(id)typedStringForEmptyAutocorrection;
-(BOOL)doesSelectedTextGenerateEmojiCandidates;
-(void)clearKeyAreas;
-(void)registerKeyArea:(CGRect)arg1 keyCode:(short)arg2 keyString:(const char*)arg3 ;
-(void)setLayoutUsesTwoHands:(BOOL)arg1 ;
-(BOOL)acceptsRange:(NSRange)arg1 inString:(id)arg2 ;
-(void)installTypologyTraceLogger;
-(TILanguageSelectionController *)languageSelectionController;
-(TILRUDictionary *)autocorrectionHistory;
-(TILRUDictionary *)recentPredictiveInputSelections;
-(TILRUDictionary *)rejectedAutocorrections;
-(TILRUDictionary *)autocorrectionsSuggestedForCurrentInput;
-(BOOL)isEditingWordPrefix;
-(void)setIsEditingWordPrefix:(BOOL)arg1 ;
-(TITextCheckerExemptions *)textCheckerExemptions;
-(BOOL)isWordLearningEnabled;
-(TIRevisionHistory *)revisionHistory;
-(TILRUDictionary *)autocorrectionForCurrentStem;
-(void)setAutocorrectionForCurrentStem:(TILRUDictionary *)arg1 ;
-(TILRUDictionary *)rejectedDisplayedAutocorrectionsForCurrentStem;
-(void)setRejectedDisplayedAutocorrectionsForCurrentStem:(TILRUDictionary *)arg1 ;
-(TIAutoshiftRegularExpressionLoader *)autoshiftRegexLoader;
-(void)setAutoshiftRegexLoader:(TIAutoshiftRegularExpressionLoader *)arg1 ;
-(unsigned long long)linguisticResourceStatus;
-(void)setLinguisticResourceStatus:(unsigned long long)arg1 ;
-(long long)deleteKeyCount;
-(void)setDeleteKeyCount:(long long)arg1 ;
-(unsigned long long)userFrequencyOfWord:(id)arg1 lexiconID:(unsigned)arg2 ;
-(unsigned long long)userFrequencyOfWord:(id)arg1 ;
-(id)humanReadableTrace;
-(void)clearHumanReadableTrace;
-(void)storeLanguageModelDynamicDataIncludingCache;
-(BOOL)isTypologyEnabled;
-(void)logToTypologyRecorderWithString:(id)arg1 ;
-(id)configurationPropertyList;
-(BOOL)dictionaryContainsWord:(id)arg1 ;
-(id)initWithConfig:(id)arg1 ;
-(void)setInput:(id)arg1 ;
@end

