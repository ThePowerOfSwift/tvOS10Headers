/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, March 22, 2017 at 9:05:18 AM Mountain Standard Time
* Operating System: Version 10.1 (Build 14U593)
* Image Source: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SpringBoardFoundation/SpringBoardFoundation-Structs.h>
#import <libobjc.A.dylib/SBFMobileKeyBagObserver.h>
#import <libobjc.A.dylib/SBFUserAuthenticationModelDelegate.h>
#import <libobjc.A.dylib/SBFAuthenticationStatusProvider.h>
#import <libobjc.A.dylib/SBFPasscodeFieldChangeObserver.h>

@protocol SBFUserAuthenticationModel, SBFAuthenticationPolicy;
@class SBFMobileKeyBag, NSMutableArray, NSHashTable, NSDate, SBFAuthenticationAssertionManager, NSData, SBFAuthenticationAssertion, PCPersistentTimer, NSString;

@interface SBFUserAuthenticationController : NSObject <SBFMobileKeyBagObserver, SBFUserAuthenticationModelDelegate, SBFAuthenticationStatusProvider, SBFPasscodeFieldChangeObserver> {

	SBFMobileKeyBag* _keybag;
	NSMutableArray* _responders;
	NSHashTable* _observers;
	id<SBFUserAuthenticationModel> _model;
	long long _authenticationState;
	NSDate* _lastRevokedAuthenticationDate;
	BOOL _hasPasscodeSet;
	SBFAuthenticationAssertionManager* _assertionManager;
	id<SBFAuthenticationPolicy> _policy;
	NSData* _lastIncorrectPasscodeAttempt;
	SBFAuthenticationAssertion* _transientAuthCheckingAssertion;
	CFRunLoopObserverRef _runLoopObserver;
	PCPersistentTimer* _unblockTimer;
	BOOL _lastAuthStateWasAuthenticated;
	BOOL _shouldFetchAuthenticationState;
	BOOL _inSecureMode;
	BOOL _okToSendNotifications;
	BOOL _hasBeenAuthenticatedOnceSinceBoot;

}

@property (setter=_setLastIncorrectPasscodeAttempt:,getter=_lastIncorrectPasscodeAttempt,nonatomic,retain) NSData * lastIncorrectPasscodeAttempt;                                       //@synthesize lastIncorrectPasscodeAttempt=_lastIncorrectPasscodeAttempt - In the implementation block
@property (setter=_setAssertionManager:,getter=_assertionManager,nonatomic,retain) SBFAuthenticationAssertionManager * assertionManager;                                                //@synthesize assertionManager=_assertionManager - In the implementation block
@property (setter=_setTransietAuthCheckingAssertion:,getter=_transientAuthCheckingAssertion,nonatomic,retain) SBFAuthenticationAssertion * transientAuthCheckingAssertion;              //@synthesize transientAuthCheckingAssertion=_transientAuthCheckingAssertion - In the implementation block
@property (setter=_setModel:,getter=_model,nonatomic,retain) id<SBFUserAuthenticationModel> model;                                                                                      //@synthesize model=_model - In the implementation block
@property (setter=_setResponders:,getter=_responders,nonatomic,retain) NSMutableArray * responders;                                                                                     //@synthesize responders=_responders - In the implementation block
@property (setter=_setObservers:,getter=_observers,nonatomic,retain) NSHashTable * observers;                                                                                           //@synthesize observers=_observers - In the implementation block
@property (assign,setter=_setRunLoopObserver:,getter=_runLoopObserver,nonatomic) CFRunLoopObserverRef runLoopObserver;                                                                  //@synthesize runLoopObserver=_runLoopObserver - In the implementation block
@property (setter=_setUnblockTimer:,getter=_unblockTimer,nonatomic,retain) PCPersistentTimer * unblockTimer;                                                                            //@synthesize unblockTimer=_unblockTimer - In the implementation block
@property (assign,setter=_setAuthenticationState:,getter=_authenticationState,nonatomic) long long authenticationState;                                                                 //@synthesize authenticationState=_authenticationState - In the implementation block
@property (assign,setter=_setLastAuthStateWasAuthenticated:,getter=_lastAuthStateWasAuthenticated,nonatomic) BOOL lastAuthStateWasAuthenticated;                                        //@synthesize lastAuthStateWasAuthenticated=_lastAuthStateWasAuthenticated - In the implementation block
@property (assign,setter=_setShouldFetchAuthenticationState:,getter=_shouldFetchAuthenticationState,nonatomic) BOOL shouldFetchAuthenticationState;                                     //@synthesize shouldFetchAuthenticationState=_shouldFetchAuthenticationState - In the implementation block
@property (assign,setter=_setInSecureMode:,getter=_isInSecureMode,nonatomic) BOOL inSecureMode;                                                                                         //@synthesize inSecureMode=_inSecureMode - In the implementation block
@property (assign,setter=_setOkToSendNotifications:,getter=_okToSendNotifications,nonatomic) BOOL okToSendNotifications;                                                                //@synthesize okToSendNotifications=_okToSendNotifications - In the implementation block
@property (assign,setter=_setHasBeenAuthenticatedOnceSinceBoot:,getter=_hasBeenAuthenticatedOnceSinceBoot,nonatomic) BOOL hasBeenAuthenticatedOnceSinceBoot;                            //@synthesize hasBeenAuthenticatedOnceSinceBoot=_hasBeenAuthenticatedOnceSinceBoot - In the implementation block
@property (setter=_setPolicy:,getter=_policy,nonatomic,retain) id<SBFAuthenticationPolicy> policy;                                                                                      //@synthesize policy=_policy - In the implementation block
@property (nonatomic,readonly) NSDate * lastRevokedAuthenticationDate;                                                                                                                  //@synthesize lastRevokedAuthenticationDate=_lastRevokedAuthenticationDate - In the implementation block
@property (assign,nonatomic) BOOL hasPasscodeSet;                                                                                                                                       //@synthesize hasPasscodeSet=_hasPasscodeSet - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(BOOL)_isInGracePeriodState;
+(BOOL)_isInBioUnlockState;
+(long long)_extendedKeybagState;
-(BOOL)isAuthenticated;
-(void)dealloc;
-(NSString *)description;
-(void)_clearBlockedState;
-(void)keybagDidUnlockForTheFirstTime:(id)arg1 ;
-(id)publicDescription;
-(void)keybag:(id)arg1 extendedStateDidChange:(id)arg2 ;
-(BOOL)hasPasscodeSet;
-(id)initWithAssertionManager:(id)arg1 policy:(id)arg2 keybag:(id)arg3 model:(id)arg4 ;
-(void)_setModel:(id)arg1 ;
-(void)_initializeAuthenticationStateAndDateForLockState:(long long)arg1 ;
-(void)_establishAuthenticationStateForInit:(long long)arg1 ;
-(void)_setupPolicy:(id)arg1 ;
-(void)_setHasBeenAuthenticatedOnceSinceBoot:(BOOL)arg1 ;
-(void)_scheduleUnblockTimer;
-(void)_clearUnblockTimer;
-(void)_addAsFirstResponder:(id)arg1 ;
-(void)_removeAuthResponder:(id)arg1 ;
-(BOOL)_processAuthenticationRequest:(id)arg1 responder:(id)arg2 ;
-(long long)_evaluateAuthenticationAttempt:(id)arg1 outError:(id*)arg2 ;
-(void)_notifyClientsOfAuthenticationResult:(long long)arg1 forRequest:(id)arg2 error:(id)arg3 withResponder:(id)arg4 ;
-(BOOL)_boolForAuthenticationResult:(long long)arg1 ;
-(void)_handleSuccessfulAuthentication:(id)arg1 responder:(id)arg2 ;
-(void)_handleFailedAuthentication:(id)arg1 error:(id)arg2 responder:(id)arg3 ;
-(void)_handleInvalidAuthentication:(id)arg1 responder:(id)arg2 ;
-(void)_setAuthState:(long long)arg1 ;
-(void)_updateAuthenticationStateImmediately:(BOOL)arg1 forPublicReason:(id)arg2 ;
-(long long)_authenticationState;
-(BOOL)_performNilPasscodeCheck;
-(void)_uncachePasscodeIfNecessary;
-(void)_setSecureMode:(BOOL)arg1 postNotification:(BOOL)arg2 ;
-(BOOL)_isUserAuthenticated;
-(void)_revokeAuthenticationImmediately:(BOOL)arg1 forPublicReason:(id)arg2 ;
-(BOOL)_authenticateIfInGracePeriod;
-(void)_updateAuthenticationStateForPublicReason:(id)arg1 ;
-(BOOL)isAssertionValid:(id)arg1 ;
-(void)notePasscodeEntryBegan;
-(void)notePasscodeEntryCancelled;
-(void)_notifyAboutTemporaryBlockStatusChanged;
-(BOOL)_isTemporarilyBlocked;
-(BOOL)_isPermanentlyBlocked;
-(void)_refreshModelCacheIfNeeded;
-(long long)_evaluatePasscodeAttempt:(id)arg1 outError:(id*)arg2 ;
-(long long)_evaluateMesaAttempt:(id)arg1 ;
-(BOOL)_authenticateWithPasscodeData:(id)arg1 outError:(id*)arg2 ;
-(void)_setup_runLoopObserverIfNecessary;
-(void)_invalidateCachedPasscodeLockState;
-(void)_updateSecureModeIfNecessaryForNewAuthState;
-(void)_setOkToSendNotifications:(BOOL)arg1 ;
-(void)_updateHasPasscodeSetForLockState:(long long)arg1 ;
-(BOOL)_shouldRevokeAuthenticationNow;
-(void)_unblockTimerFired;
-(void)_updateAuthenticationStateAndFirstAuthenticationForLockState:(long long)arg1 ;
-(void)_updateAuthenticationStateAndDateForLockState:(id)arg1 ;
-(void)deviceLockModelRequestsDeviceWipe:(id)arg1 ;
-(void)deviceLockStateMayHaveChangedForModel:(id)arg1 ;
-(BOOL)hasAuthenticatedAtLeastOnceSinceBoot;
-(BOOL)isAuthenticatedCached;
-(void)revokeAuthenticationImmediatelyForPublicReason:(id)arg1 ;
-(void)revokeAuthenticationImmediatelyIfNecessaryForPublicReason:(id)arg1 ;
-(void)revokeAuthenticationIfNecessaryForPublicReason:(id)arg1 ;
-(id)initWithAssertionManager:(id)arg1 policy:(id)arg2 ;
-(void)addAsFirstResponder:(id)arg1 ;
-(void)processAuthenticationRequest:(id)arg1 responder:(id)arg2 ;
-(void)processAuthenticationRequest:(id)arg1 ;
-(void)addAuthenticationAssertion:(id)arg1 ;
-(void)removeAuthenticationAssertion:(id)arg1 ;
-(double)_timeUntilUnblockedSinceReferenceDate;
-(void)_notifyOfAuthenticationSuccess;
-(void)_addPrivateAuthenticationObserver:(id)arg1 ;
-(void)_removePrivateAuthenticationObserver:(id)arg1 ;
-(void)_setObservers:(id)arg1 ;
-(NSDate *)lastRevokedAuthenticationDate;
-(void)setHasPasscodeSet:(BOOL)arg1 ;
-(id)_policy;
-(void)_setPolicy:(id)arg1 ;
-(id)_lastIncorrectPasscodeAttempt;
-(void)_setLastIncorrectPasscodeAttempt:(id)arg1 ;
-(id)_assertionManager;
-(void)_setAssertionManager:(id)arg1 ;
-(id)_transientAuthCheckingAssertion;
-(void)_setTransietAuthCheckingAssertion:(id)arg1 ;
-(id)_responders;
-(void)_setResponders:(id)arg1 ;
-(CFRunLoopObserverRef)_runLoopObserver;
-(void)_setRunLoopObserver:(CFRunLoopObserverRef)arg1 ;
-(id)_unblockTimer;
-(void)_setUnblockTimer:(id)arg1 ;
-(void)_setAuthenticationState:(long long)arg1 ;
-(BOOL)_lastAuthStateWasAuthenticated;
-(void)_setLastAuthStateWasAuthenticated:(BOOL)arg1 ;
-(BOOL)_shouldFetchAuthenticationState;
-(void)_setShouldFetchAuthenticationState:(BOOL)arg1 ;
-(BOOL)_isInSecureMode;
-(void)_setInSecureMode:(BOOL)arg1 ;
-(BOOL)_okToSendNotifications;
-(BOOL)_hasBeenAuthenticatedOnceSinceBoot;
-(id)_model;
-(void)removeResponder:(id)arg1 ;
-(id)descriptionWithMultilinePrefix:(id)arg1 ;
-(id)succinctDescription;
-(id)succinctDescriptionBuilder;
-(id)descriptionBuilderWithMultilinePrefix:(id)arg1 ;
-(id)_observers;
@end

