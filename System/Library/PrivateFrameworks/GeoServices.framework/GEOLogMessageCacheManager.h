/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, March 22, 2017 at 9:03:16 AM Mountain Standard Time
* Operating System: Version 10.1 (Build 14U593)
* Image Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_dispatch_source;
#import <GeoServices/GeoServices-Structs.h>
@class NSString, NSMutableArray, NSObject, NSDate;

@interface GEOLogMessageCacheManager : NSObject {

	NSString* _logMessageCacheFilePath;
	sqlite3Ref _logMessageCacheDatabase;
	NSString* _adaptorId;
	BOOL _fromLogFrameworkAdaptor;
	long long _logMessageCacheIterator;
	long long _logMessageCacheEndIterator;
	NSMutableArray* _retrivedLogMessageCacheIds;
	int _currentRetrivedLogMessageRetryCount;
	NSObject*<OS_dispatch_queue> _databaseQueue;
	void* _databaseQueueIdentityKey;
	void* _databaseQueueIdentityValue;
	long long _maxNumberOfLogMessageAllowedInCache;
	BOOL _encryptionEnabled;
	NSObject*<OS_dispatch_source> _logMessageCacheTransactionTimer;
	BOOL _logMessageCacheTransactionPending;
	long long _pendingLogMessageCount;

}

@property (assign,nonatomic) NSDate * oldestLogMessageInCache; 
@property (readonly) int currentRetrivedLogMessageRetryCount;               //@synthesize currentRetrivedLogMessageRetryCount=_currentRetrivedLogMessageRetryCount - In the implementation block
@property (assign,nonatomic) BOOL encryptionEnabled;                        //@synthesize encryptionEnabled=_encryptionEnabled - In the implementation block
-(void)dealloc;
-(void)_createTables;
-(NSDate *)oldestLogMessageInCache;
-(void)setOldestLogMessageInCache:(NSDate *)arg1 ;
-(id)initWithLogMessageCacheFilePath:(id)arg1 maxNumberOfLogMessagesAllowedInCache:(long long)arg2 adaptorId:(id)arg3 fromLogFrameworkAdaptor:(BOOL)arg4 ;
-(void)openLogMessageCache;
-(void)insertLogMessageIntoCache:(id)arg1 ;
-(void)resetLogMessageCacheIterator;
-(id)retrieveFirstBatchOfLogMessagesWithLimitCount:(long long)arg1 limitSize:(long long)arg2 ;
-(id)retrieveNextBatchOfLogMessagesWithLimitCount:(long long)arg1 limitSize:(long long)arg2 ;
-(void)closeLogMessageCache;
-(void)purgeExpiredLogMessagesFromCache:(double)arg1 ;
-(void)purgeCurrentlyRetrievedLogMessagesFromCache;
-(void)updateCurrentlyRetrievedLogMessagesRetryCount;
-(BOOL)isLogMessageCacheEmpty;
-(BOOL)shouldFlushLogMessageCache;
-(void)beginLogMessageCacheTransaction;
-(void)commitLogMessageCacheTransaction;
-(BOOL)_usingInMemoryLogMessageCacheFile;
-(BOOL)_logMessageCacheFileExists;
-(void)_cleanupPartiallyCreatedLogMessageCacheDBFile;
-(void)_openLogMessageCacheDBFile;
-(void)_openCreateLogMessageCacheDBFile;
-(BOOL)_executeSQL:(id)arg1 ;
-(void)_migrateDatabaseIfNeeded;
-(void)_addRetryCountColumnToTable;
-(void)_deleteExpiredLogMessageCacheDBFile:(double)arg1 ;
-(void)_deleteAllExpiredLogMessages:(double)arg1 ;
-(id)_retrieveBatchOfLogMessagesLimitCount:(long long)arg1 limitSize:(long long)arg2 ;
-(id)_groupIDOfNextPendingLogMessage;
-(long long)_retrieveEndLogMessageCacheIterator;
-(long long)_getNumberOfLogMessagesInCache;
-(void)_cleanupLogMessageCacheDatabase;
-(long long)_queryLogMessageCacheDBUserVersion;
-(void)_updateLogMessageCacheDBUserVersion;
-(void)_setLogMessageCacheDBJournalMode;
-(void)_beginLogMessageCacheTransaction;
-(void)_commitLogMessageCacheTransaction;
-(void)_startLogMessageCacheTransactionTimer;
-(void)_stopLogMessageCacheTransactionTimer;
-(int)currentRetrivedLogMessageRetryCount;
-(BOOL)encryptionEnabled;
-(void)setEncryptionEnabled:(BOOL)arg1 ;
@end

