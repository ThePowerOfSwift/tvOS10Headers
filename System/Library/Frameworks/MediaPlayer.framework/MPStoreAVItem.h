/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, March 22, 2017 at 9:05:27 AM Mountain Standard Time
* Operating System: Version 10.1 (Build 14U593)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MediaPlayer/MPAVItem.h>

@protocol OS_dispatch_queue;
@class NSObject, NSNumber, SBCPlaybackPositionDomain, SBCPlaybackPositionEntity, SBCPlaybackPositionValueService, MPStorePlayWhileDownloadSession, MPStreamingDownloadSession, MPMediaPlaybackItemMetadata, NSString, NSDictionary;

@interface MPStoreAVItem : MPAVItem {

	NSObject*<OS_dispatch_queue> _accessQueue;
	unsigned long long _assetQuality;
	BOOL _didDeferLeaseStart;
	BOOL _hasEverPrioritizedPlayerItem;
	BOOL _hasPrioritizedPlayWhileDownloadSession;
	BOOL _hasPrioritizedStreamingDownloadSession;
	BOOL _hasValidAssetQuality;
	BOOL _isActivePlayerItem;
	NSNumber* _bookmarkTime;
	SBCPlaybackPositionDomain* _playbackPositionDomain;
	SBCPlaybackPositionEntity* _playbackPositionEntity;
	long long _playbackPositionEntityRevision;
	SBCPlaybackPositionValueService* _playbackPositionService;
	MPStorePlayWhileDownloadSession* _playWhileDownloadSession;
	unsigned long long _preferredAssetQuality;
	MPStreamingDownloadSession* _streamingDownloadSession;
	unsigned long long _options;
	MPMediaPlaybackItemMetadata* _playbackItemMetadata;
	unsigned long long _streamType;
	NSString* _assetSourceStoreFrontID;
	NSString* _requestingBundleIdentifier;
	NSString* _requestingBundleVersion;
	long long _equivalencySourceAdamID;
	NSDictionary* _alternativeConfigurationOptions;

}

@property (nonatomic,copy,readonly) NSDictionary * alternativeConfigurationOptions;              //@synthesize alternativeConfigurationOptions=_alternativeConfigurationOptions - In the implementation block
@property (nonatomic,readonly) unsigned long long options;                                       //@synthesize options=_options - In the implementation block
@property (nonatomic,readonly) MPMediaPlaybackItemMetadata * playbackItemMetadata;               //@synthesize playbackItemMetadata=_playbackItemMetadata - In the implementation block
@property (nonatomic,readonly) unsigned long long streamType;                                    //@synthesize streamType=_streamType - In the implementation block
@property (nonatomic,copy) NSString * assetSourceStoreFrontID;                                   //@synthesize assetSourceStoreFrontID=_assetSourceStoreFrontID - In the implementation block
@property (nonatomic,copy) NSString * requestingBundleIdentifier;                                //@synthesize requestingBundleIdentifier=_requestingBundleIdentifier - In the implementation block
@property (nonatomic,copy) NSString * requestingBundleVersion;                                   //@synthesize requestingBundleVersion=_requestingBundleVersion - In the implementation block
@property (assign,nonatomic) long long equivalencySourceAdamID;                                  //@synthesize equivalencySourceAdamID=_equivalencySourceAdamID - In the implementation block
+(BOOL)isPlaybackItemMetadataValidForAssetCreation:(id)arg1 ;
+(BOOL)isPlaybackItemMetadataStreamingForAssetCreation:(id)arg1 returningProtectionType:(unsigned long long*)arg2 ;
+(unsigned long long)_currentPreferredAssetQualityForPlaybackItemMetadata:(id)arg1 ;
+(id)_assetURLForCachedLocalPlaybackAssetFilePathForPlaybackItemMetadata:(id)arg1 withMinimumAssetQuality:(unsigned long long)arg2 assetOptions:(id)arg3 returningProtectionType:(unsigned long long*)arg4 assetQuality:(unsigned long long*)arg5 usesPurchaseBundle:(BOOL*)arg6 ;
+(double)nominalHasBeenPlayedThresholdForDuration:(double)arg1 ;
+(BOOL)shouldIncrementPlayCountForElapsedTime:(double)arg1 startTime:(double)arg2 stopTime:(double)arg3 ;
+(BOOL)hasNominalAmountBeenPlayedForElapsedTime:(double)arg1 startTime:(double)arg2 stopTime:(double)arg3 ;
-(void)dealloc;
-(id)init;
-(id)description;
-(long long)type;
-(unsigned long long)options;
-(void)setRating:(float)arg1 ;
-(void)setAlternateAudioTrackID:(int)arg1 ;
-(void)setAlternateAudioTrackLocale:(id)arg1 ;
-(id)modelObject;
-(void)loadAssetAndPlayerItem;
-(id)mediaItem;
-(id)playbackInfo;
-(id)displayableText;
-(long long)_persistedLikedState;
-(void)_handleUpdatedLikedState:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(long long)storeItemInt64ID;
-(BOOL)useEmbeddedChapterData;
-(id)chapterTimeMarkers;
-(id)artworkTimeMarkers;
-(id)urlTimeMarkers;
-(double)durationFromExternalMetadata;
-(long long)customAVEQPreset;
-(BOOL)allowsEQ;
-(void)_currentPlaybackRateDidChange:(float)arg1 ;
-(BOOL)isSupportedDefaultPlaybackSpeed:(long long)arg1 ;
-(void)setPlaybackStoppedTime:(double)arg1 ;
-(void)notePlaybackFinishedByHittingEnd;
-(void)setPlaybackCheckpointCurrentTime:(double)arg1 ;
-(void)setPlaybackFinishedTime:(double)arg1 ;
-(id)artist;
-(id)albumArtist;
-(long long)artistStoreID;
-(unsigned long long)albumTrackNumber;
-(unsigned long long)albumTrackCount;
-(void)applyVolumeNormalizationWithSoundCheckEnabled:(BOOL)arg1 ;
-(BOOL)canSeedGenius;
-(id)composer;
-(unsigned long long)discNumber;
-(unsigned long long)discCount;
-(BOOL)isCloudItem;
-(BOOL)isValidPlayerSubstituteForItem:(id)arg1 ;
-(BOOL)isAssetURLValid;
-(BOOL)isExplicitTrack;
-(id)genre;
-(BOOL)hasAlternatesForTypes:(unsigned long long)arg1 ;
-(BOOL)isStreamable;
-(id)mainTitle;
-(void)prepareForRate:(float)arg1 completionHandler:(/*^block*/id)arg2 ;
-(BOOL)supportsRewindAndFastForward15Seconds;
-(id)titlesForTime:(double)arg1 ;
-(float)userRating;
-(unsigned long long)persistentID;
-(void)_loadMediaItemWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)reevaluateType;
-(void)_willBecomeActivePlayerItem;
-(void)_willResignActivePlayerItem;
-(long long)albumStoreID;
-(id)copyrightText;
-(id)externalContentIdentifier;
-(BOOL)isLikedStateEnabled;
-(BOOL)supportsLikedState;
-(long long)storeSubscriptionAdamID;
-(void)setLoudnessInfoVolumeNormalization:(float)arg1 ;
-(id)modelSong;
-(BOOL)allowsAirPlayFromCloud;
-(BOOL)allowsExternalPlayback;
-(long long)storePlaybackEndpointType;
-(id)artworkCatalogForPlaybackTime:(double)arg1 ;
-(BOOL)usesSubscriptionLease;
-(BOOL)didDeferLeaseStart;
-(BOOL)_shouldRememberBookmarkTime;
-(NSString *)requestingBundleIdentifier;
-(void)setRequestingBundleIdentifier:(NSString *)arg1 ;
-(NSString *)requestingBundleVersion;
-(void)setRequestingBundleVersion:(NSString *)arg1 ;
-(void)_mediaPlaybackItemMetadataDidChangeNotification:(id)arg1 ;
-(void)_mediaPlaybackItemMetadataLikedStateDidChangeNotification:(id)arg1 ;
-(id)_newTimeMarkersForChapterType:(long long)arg1 ;
-(MPMediaPlaybackItemMetadata *)playbackItemMetadata;
-(BOOL)_getAssetURL:(id*)arg1 playWhileDownloadSession:(id*)arg2 assetQuality:(unsigned long long*)arg3 error:(id*)arg4 usingStoreDownload:(id)arg5 assetOptions:(id)arg6 shouldStartDownload:(BOOL)arg7 ;
-(long long)equivalencySourceAdamID;
-(void)setEquivalencySourceAdamID:(long long)arg1 ;
-(NSString *)assetSourceStoreFrontID;
-(void)setAssetSourceStoreFrontID:(NSString *)arg1 ;
-(NSDictionary *)alternativeConfigurationOptions;
-(id)_playbackPositionService;
-(id)_playbackPositionEntityWithLoadedStoreUbiquitousIdentifier:(id)arg1 ;
-(id)_storeUbiquitousIdentifier;
-(void)_prioritizeDownloadSessionsIfNeeded;
-(void)_handlePlaybackFinishedTime:(double)arg1 finishedByHittingEnd:(BOOL)arg2 ;
-(void)_applyLoudnessInfo;
-(void)_updateBookmarkTimeIfNecessary:(double)arg1 isCheckpoint:(BOOL)arg2 ;
-(id)_chapterTitleForTime:(double)arg1 ;
-(id)_bookmarkTime;
-(id)_playbackPositionEntity;
-(double)_expectedStartTimeWithPlaybackInfo:(id)arg1 ;
-(double)_expectedStopTimeWithPlaybackInfo:(id)arg1 ;
-(void)handlePlaybackFinishedTime:(double)arg1 finishedByHittingEnd:(BOOL)arg2 ;
-(id)_playbackPositionDomain;
-(id)initWithPlaybackItemMetadata:(id)arg1 options:(unsigned long long)arg2 ;
-(BOOL)isStreamingLowQualityAsset;
-(id)storeDownload;
-(long long)mpcReporting_equivalencySourceAdamID;
-(id)mpcReporting_requestingBundleIdentifier;
-(id)mpcReporting_requestingBundleVersion;
-(unsigned long long)streamType;
-(id)album;
@end

